#define _USE_MATH_DEFINES
#define _MRATE 0.01

#include <iostream>
#include <fstream>
#include <time.h>
#include <random>
#include <array>
#include <vector>
#include <cmath>
#include <complex>
#include <algorithm>
#include <thread>
#include <string>

using namespace std;

mt19937 engine((unsigned)time(NULL));

class monitor16pu {
    public:
    array<double, 16> gain13;
    array<double, 2> align13;
    array<double, 2> beta13;
    array<array<double, 16>, 16> mat13;
    array<array<double, 16>, 16> matInvNorm13;

    array<double, 16> gain15;
    array<double, 2> align15;
    array<double, 2> beta15;
    array<array<double, 16>, 16> mat15;
    array<array<double, 16>, 16> matInvNorm15;

    monitor16pu();
};

monitor16pu::monitor16pu() {
    monitor16pu::gain13 = {1.000000000000000000e0, 9.864749932865497506e-1, 1.008554910983899822e0, 9.909215189952645941e-1,
                        1.016551297946559407e0, 1.004441025921927633e0, 1.023606422028664920e0, 1.007893430992459427e0,
                        1.019020740443200568e0, 1.002733038130677601e0, 1.021101905384611097e0, 1.002615873152301385e0,
                        1.045142626872535008e0, 9.986874348446839189e-1, 1.022369446580688512e0, 9.918986411869963327e-1};
    monitor16pu::align13 = {-0.25069580086359916, 1.0363901454673603};
    monitor16pu::beta13 = {39.801200492, -6.555572287679994};
    monitor16pu::mat13 = {6.306858559892658533e-02,1.482997160229145061e-03,1.932693099737171711e-06,1.742187044074983119e-05,1.919478059537842648e-08,2.039445135809482120e-07,4.062724154098598651e-10,2.404000958475349078e-09,2.339842577559197180e-12,2.895374829352571522e-11,-4.359881092591580478e-14,3.461598848692095130e-13,-1.104536346658481312e-15,4.324116984954027844e-15,-1.877348033525889903e-17,4.667593986546279126e-17,
                        6.270411513991192010e-02,1.366821678011800835e-03,5.679607562713779364e-04,1.231494223063116206e-05,1.229232589311296353e-05,7.875069673991775359e-08,1.887556336444376929e-07,-5.032083051544871113e-12,2.398880314071163594e-09,-1.123155326351647815e-11,2.592339652536403823e-11,-2.433950167470381421e-13,2.345004335895843432e-13,-3.862269341327394615e-15,1.497430046122542905e-15,-4.305385850426997581e-17,
                        6.340916415576981768e-02,1.053164140103440881e-03,1.056142333341545270e-03,-5.102247399827231990e-09,1.750632343247255447e-05,-1.459828295828703233e-07,1.459220485792591677e-07,-2.417322178417649681e-09,-1.366591659752695378e-12,-1.978666818392504647e-11,-1.974489837029362573e-11,-1.326793840982442943e-15,-3.315028214666960608e-13,2.885524864304359093e-15,-2.902042619418628090e-15,4.360999108874165451e-17,
                        6.190812886472765036e-02,5.578166919608529154e-04,1.354376314478419668e-03,-1.224170836782736781e-05,1.215541120510567287e-05,-1.873546610147871706e-07,-7.884246011902757104e-08,6.398421858865230233e-12,-2.394429571951320636e-09,2.597657514537112233e-11,-1.122921828858256082e-11,2.446867132584526887e-13,2.359062566675133670e-13,-1.571496106921129635e-15,3.931121286931093269e-15,-4.458594063392197194e-17,
                        6.293527489299885480e-02,-3.055581947056812476e-06,1.484449106605406242e-03,-1.743895172823152083e-05,-5.619545925245574001e-08,3.538750576085582306e-10,-2.041954666132018319e-07,2.407568763179304716e-09,-1.612862869535479174e-12,1.412720481079651672e-13,2.881871834707998344e-11,-3.455177467692698062e-13,8.890278700616894760e-16,-1.313293984357184782e-17,-4.287695218658002360e-15,4.548027085292727818e-17,
                        6.271618995107886008e-02,-5.722460811459761107e-04,1.373188897648665698e-03,-1.236634508401917867e-05,-1.246894666326963317e-05,1.909314740052408077e-07,-7.862721539700389796e-08,-1.334334986736940588e-11,2.424007592884255551e-09,-2.610100096836635330e-11,-1.155211769960800620e-11,2.453346346780046041e-13,-2.339943739799943139e-13,1.556870525339142641e-15,3.888011786747420304e-15,-4.445888361033005342e-17,
                        6.173996654341597917e-02,-1.034981204277181464e-03,1.030900601147954941e-03,7.291690404951458104e-08,-1.724938733941066136e-05,1.427682967953107730e-07,1.446795326209211735e-07,-2.379281831949312079e-09,-1.933720641948481538e-11,1.970280978079300877e-11,-1.934703579812932572e-11,-3.411480469709581532e-15,3.290707837992892395e-13,-2.843890644252795321e-15,-2.867643904133659029e-15,4.181266591685914254e-17,
                        6.162953397117861692e-02,-1.352061123963206558e-03,5.583669106594901180e-04,1.224710299581592480e-05,-1.219790806374033798e-05,-7.926872864672618489e-08,1.878168743082293204e-07,1.589687150932056608e-11,-2.401176234510510965e-09,1.101025819896856207e-11,2.609803965111637711e-11,-2.391383318966157028e-13,-2.381828916779071182e-13,3.867156757347120041e-15,1.617634770518585866e-15,-4.485664498166422574e-17,
                        6.246310825667692607e-02,-1.475578539453794745e-03,-2.307143103382068324e-07,1.735399046043943551e-05,-1.270528980912599585e-08,-2.034144074767865791e-07,-4.631811706182973941e-12,2.397194637581149417e-09,-3.493338473571088572e-13,-2.861285653495743111e-11,-2.845720060263237057e-14,3.424555004263747645e-13,-2.444756449223852830e-16,-4.281178544239468023e-15,1.069035889908997740e-17,4.550293282999504462e-17,
                        6.231559700086032605e-02,-1.365822532877950793e-03,-5.642011702986558883e-04,1.234471494294785183e-05,1.226632872726865122e-05,-7.945554865664676296e-08,-1.889732491921172740e-07,3.602180727006952938e-12,2.413426636539993177e-09,1.138168309736826288e-11,-2.629751158337622919e-11,-2.471595992847066223e-13,2.403410382397360571e-13,3.975519728852784444e-15,-1.613123353294505262e-15,-4.549733108474238518e-17,
                        6.296191645533864845e-02,-1.050964719441855851e-03,-1.050505782292582898e-03,-2.481096037266311780e-09,1.744045567777191910e-05,1.454283671110233661e-07,-1.448056937267736226e-07,-2.405189279466958343e-09,-1.011532489020485733e-11,1.963266603018630725e-11,1.982874340169821727e-11,7.445106596646840444e-16,-3.325532212214533258e-13,-2.924742555486989283e-15,2.917085346337418889e-15,4.336500925813843653e-17,
                        6.293960219485614238e-02,-5.696826547674368416e-04,-1.377570048881338917e-03,-1.245289075793739363e-05,1.236430021826216526e-05,1.901687279641771566e-07,8.064993142411434527e-08,1.653320590304075394e-11,-2.432187935751331518e-09,-2.644950050443716061e-11,1.124207275932461716e-11,2.463512756062822767e-13,2.392615453932187881e-13,1.552798788090359964e-15,-3.927842126764910569e-15,-4.453137516366950648e-17,
                        6.225867012787331817e-02,6.251679917651621279e-07,-1.467849442583106035e-03,-1.725150169810810760e-05,-6.533734571797750406e-08,-1.217431450872897076e-09,2.023085069189140391e-07,2.388978480583722754e-09,2.169418608926768804e-11,4.713546377224208667e-13,-2.874413031842088451e-11,-3.450911987065095274e-13,-6.913389655318749675e-15,-9.351462155043441792e-17,4.291839424060956589e-15,4.560400855148345223e-17,
                        6.219011137123432037e-02,5.636843797853755174e-04,-1.359654186325118166e-03,-1.225057543616735032e-05,-1.232491104153247124e-05,-1.890021632313294588e-07,7.798513220737458545e-08,-1.289157039813612499e-11,2.401339779947685949e-09,2.597162929569837210e-11,1.139908290871086090e-11,2.447484865030399886e-13,-2.328740860278413931e-13,-1.509560282914026318e-15,-3.919859962653870638e-15,-4.398772878494509285e-17,
                        6.290489859870060374e-02,1.048322371121852619e-03,-1.047911067516170717e-03,4.305839581556852308e-08,-1.748491458085870933e-05,-1.451359765918498747e-07,-1.458580114931782318e-07,-2.410665400548597858e-09,-1.188378820603817085e-11,-1.990085746296588750e-11,1.961657800453363281e-11,-3.782473362601699055e-15,3.334389646291709219e-13,2.855967826049600475e-15,2.943241877454974319e-15,4.320179107702170763e-17,
                        6.185486385506931001e-02,1.350970689472659686e-03,-5.593939816164058242e-04,1.221033213282047835e-05,-1.218349151114654657e-05,7.845288891546974036e-08,-1.870969078429822285e-07,3.683613697340263756e-12,-2.389395616940263846e-09,-1.115538855323494723e-11,-2.594178603098093507e-11,-2.416012011496970778e-13,-2.360859426102660706e-13,-3.917547754173792385e-15,-1.553285656380155576e-15,-4.426755574033102561e-17};
    monitor16pu::matInvNorm13 = {9.999413998070250109e-01,9.999460435510404421e-01,1.000036939761390409e+00,9.998124202563855034e-01,1.000271488239349749e+00,9.998693920504219124e-01,1.000111480706963318e+00,9.998456629174904409e-01,9.999773275920876836e-01,1.000162081686137849e+00,9.998997463053272972e-01,1.000186489373741328e+00,9.997085318373660767e-01,1.000132905206968958e+00,9.999092115071314124e-01,1.000191401767124733e+00,
                        8.402690869148989350e+01,7.855569013495049546e+01,5.868037260691073698e+01,3.282522159378924442e+01,-7.166513112806041086e-01,-3.193109828147644436e+01,-6.147302662371219384e+01,-7.772471435037130050e+01,-8.545037779220223229e+01,-7.759246361210819032e+01,-6.062931303009958839e+01,-3.158140091037386199e+01,-1.446554977717688650e-01,3.261407689753472994e+01,5.948528506596413479e+01,7.875739354011824389e+01,
                        -3.184580464191904547e-01,3.228656153914549520e+01,5.995639198359812383e+01,7.820350744773398333e+01,8.476220176545791674e+01,7.757651271415326732e+01,6.031722793075426381e+01,3.220030029154117557e+01,4.337302640585219415e-01,-3.240834556455450866e+01,-5.952089441992973917e+01,-7.802962192320494239e+01,-8.487089293163909076e+01,-7.812708433428798571e+01,-5.990049734393068093e+01,-3.223788653676192695e+01,
                        7.137783296339693152e+03,5.112365477098272095e+03,-7.851964983994369618e+01,-5.081306374642089395e+03,-7.195729819149987634e+03,-5.035351301641623650e+03,5.802079164518411147e+01,5.085147097495299931e+03,7.223963968785255929e+03,5.052380434869687633e+03,3.093289319604604870e+01,-5.086032890206775846e+03,-7.219966991685299035e+03,-5.069979210138622875e+03,-4.370857235080535474e+00,5.135855289893223926e+03,
                        -4.128864486652737753e+01,5.087607693875425866e+03,7.136140344759595791e+03,5.099855744849646726e+03,-4.102723224737526664e+01,-5.040457598271681491e+03,-7.316189874531491114e+03,-5.057047774689844118e+03,-2.612702648095267577e+01,5.048683556148226671e+03,7.205862535473165735e+03,5.006432193559158804e+03,-2.916023524624746344e+01,-5.076237364001140122e+03,-7.202681364551679508e+03,-5.072362732333781423e+03,
                        6.049011323557938449e+05,2.396483519005203561e+05,-4.382757016334204818e+05,-5.618301118111484684e+05,-1.571629856130904727e+03,5.632854633836707799e+05,4.344627039328728570e+05,-2.369006016064683208e+05,-6.115075652575897984e+05,-2.343046354074297997e+05,4.341596774890003726e+05,5.562759611219625222e+05,-2.106216762353617469e+03,-5.657101597251122585e+05,-4.308280296919397661e+05,2.393924747899266367e+05,
                        -2.662443326703010825e+03,5.646673200289527886e+05,4.279343994867376168e+05,-2.366162533193831914e+05,-6.090826484717677813e+05,-2.330150638983670797e+05,4.439187612618173589e+05,5.646857144498244161e+05,-2.418693814792285139e+03,-5.565914658578806557e+05,-4.390198956733581144e+05,2.405489163061128347e+05,6.118203734236392193e+05,2.341006563270064944e+05,-4.343683409772803425e+05,-5.654667673793170834e+05,
                        5.087124571121729910e+07,1.119067933127190452e+06,-5.272955327068960667e+07,8.680483496539668413e+05,5.111064435668140650e+07,5.821473845092523843e+05,-5.345720835225655884e+07,1.006413324495706591e+06,5.141201192359492183e+07,7.237471585985765560e+05,-5.296820200364012271e+07,1.323752426483716350e+06,5.158727877359198779e+07,2.446428717375808046e+05,-5.230182401809504628e+07,8.855952866770752007e+05,
                        -3.838756986744244932e+05,5.241258514119739085e+07,-6.772074381322815316e+05,-5.168932041957750171e+07,-5.462655290799565846e+05,5.222136688028974086e+07,-8.780164960629242705e+05,-5.219173148805026710e+07,5.996072744596879929e+05,5.105952124851896614e+07,4.918003338072042679e+05,-5.171546453306925297e+07,3.770671803330594557e+05,5.209912062451072782e+07,-4.198797444921328570e+05,-5.208505744134169817e+07,
                        4.304301365307842255e+09,-1.599427431200844288e+09,-3.150392094739248276e+09,4.117372586963991642e+09,1.440313067957474105e+07,-4.085007020188084126e+09,3.254280087345081806e+09,1.586597720981162310e+09,-4.327028667759906769e+09,1.603631306629714966e+09,3.173473113201637268e+09,-4.082679482509153366e+09,3.369625028280577809e+07,4.095570413339972973e+09,-3.184360063912318707e+09,-1.595812367223905325e+09,
                        -2.102333120259914547e+07,4.125340881569543839e+09,-3.180174857363269329e+09,-1.615202780518994808e+09,4.320756676590899467e+09,-1.623865802434098244e+09,-3.183257980723783493e+09,4.136961603416942120e+09,-3.777085914116869122e+07,-4.054970198830155849e+09,3.158694890463657379e+09,1.568760697542835236e+09,-4.363833028166501999e+09,1.656159573613260984e+09,3.124283466705462456e+09,-4.116477574751970768e+09,
                        3.604535387839906006e+11,-2.554800833334613037e+11,-1.207473219268465191e+08,2.585142133768315430e+11,-3.620215949421724854e+11,2.553867624233882751e+11,-2.375439299573695183e+09,-2.564574463999008484e+11,3.632380267932874756e+11,-2.560974503151954346e+11,1.396151675565687180e+09,2.512340434692117004e+11,-3.650361730757618408e+11,2.594215007235646667e+11,-3.893049071341799259e+09,-2.551705562390465393e+11,
                        2.143926967192851603e+08,2.665171992605645752e+11,-3.731634033223012085e+11,2.675063575278382263e+11,-6.247197764797392488e+07,-2.626556799043166199e+11,3.794801826879353638e+11,-2.692885313205568848e+11,2.790921686277306080e+09,2.623359363631508484e+11,-3.718211762495717773e+11,2.636847362527774353e+11,-1.689168636435148001e+09,-2.652555795022042542e+11,3.749221298006658325e+11,-2.695171217885629578e+11,
                        2.937521841317168750e+13,-2.745575140157400000e+13,2.125136478914786328e+13,-1.207462281257746680e+13,5.157480427142016602e+10,1.174723629863906055e+13,-2.147299785263950781e+13,2.753898628755692188e+13,-2.945194560154652734e+13,2.721046700469135938e+13,-2.110487736917602344e+13,1.182805539971532422e+13,-7.890405831542990112e+10,-1.188735452162009375e+13,2.120539213286899609e+13,-2.754674298073397266e+13,
                        5.591433517171932220e+10,1.195678964676207422e+13,-2.114999901277765234e+13,2.748473708065037109e+13,-2.919485683621238672e+13,2.703571649562666016e+13,-2.157422929283521875e+13,1.216316281476184961e+13,-1.794486419635328064e+11,-1.169456655227083203e+13,2.090942587083592188e+13,-2.675360293263904297e+13,2.942612648068332422e+13,-2.744143813504088672e+13,2.142687804228785156e+13,-1.221366315172071094e+13,
                        1.411664770215943750e+15,-1.425581589371573500e+15,1.401387927769147000e+15,-1.424603075057991750e+15,1.396734144148960750e+15,-1.395123838367636750e+15,1.417306274271324000e+15,-1.428928753756292000e+15,1.410059836059073250e+15,-1.402477989716191000e+15,1.376925171344775250e+15,-1.376245229453973500e+15,1.400404994852157000e+15,-1.414332897004222250e+15,1.406113595484454750e+15,-1.432234529429722500e+15};
    
    monitor16pu::gain15 = {1.000000000000000000e0, 9.927984352486749486e-1, 9.886965960947093901e-1, 9.844666881364172450e-1,
                        9.811551707487992102e-1, 9.783521372729635512e-1, 9.896903610596464729e-1, 9.869302062198921366e-1,
                        9.906593504726489696e-1, 9.859330582601781856e-1, 9.980913383872332956e-1, 9.882277496998294053e-1,
                        1.000800169181874200e0, 9.924633771768432977e-1, 9.944628454760420233e-1, 1.001591146042800640e0};
    monitor16pu::align15 = {0.7799954861648153, -0.17114181002093012};
    monitor16pu::beta15 = {14.156200376800001, -29.618803660000015};
    monitor16pu::mat15 = {6.439293380975033565e-02,1.515387054203709647e-03,6.120982908033236483e-06,1.778654265742590418e-05,8.601565196172394662e-08,2.083352874067855360e-07,3.859637767587980433e-10,2.456988805644050024e-09,3.255623669832103009e-12,2.959232146225040159e-11,2.177264990096083980e-14,3.555675108600633391e-13,-6.153465684449890577e-16,4.476436006486088272e-15,-1.362549647822390128e-17,4.842463630314704141e-17,
                        6.263635138166290250e-02,1.367858079091725581e-03,5.754451948540396456e-04,1.226307615284347906e-05,1.248348197901368038e-05,7.702917455771536137e-08,1.909058022593893069e-07,-4.081054165230484835e-11,2.425505784619559342e-09,-1.188953544358279303e-11,2.621905067153506949e-11,-2.531041081484340313e-13,2.352106500620405513e-13,-4.013983193630683422e-15,1.530959472696348494e-15,-4.565331107649834683e-17,
                        6.241726435478467394e-02,1.037061131395958929e-03,1.051316226396119139e-03,-2.158853369282527976e-07,1.742408676784729270e-05,-1.477441591745135070e-07,1.427772841141061706e-07,-2.408090891218390864e-09,-4.393940898223085536e-11,-1.940871998938142605e-11,-2.010965105281571901e-11,5.885426657176178985e-15,-3.327482131619228599e-13,2.965444416366751923e-15,-2.848878973558600104e-15,4.289787994156158253e-17,
                        6.103345830001059152e-02,5.465289046949192492e-04,1.345375633547948044e-03,-1.230178424157297418e-05,1.202265423838270676e-05,-1.862658255638869148e-07,-8.113037515599346172e-08,4.384534245908851819e-11,-2.391979280699420440e-09,2.618593972884245755e-11,-1.067500845803124165e-11,2.378773555948127043e-13,2.409551014887008024e-13,-1.668177158900885564e-15,3.903624818243717980e-15,-4.610679163895566273e-17,
                        6.105067526950034434e-02,-5.036349299527539493e-06,1.446735902545767064e-03,-1.705412223951028547e-05,-5.427478343954425763e-08,7.017671278986898073e-10,-2.002674205986407645e-07,2.358901047535257906e-09,1.020050245655033685e-11,-1.378094823939768011e-13,2.825472057445427862e-11,-3.381795718226447120e-13,-2.428283885055899254e-15,2.734550473669941707e-17,-4.178425688738851546e-15,4.351712233948272159e-17,
                        6.232844731173375896e-02,-5.684159298593952775e-04,1.366032660162696958e-03,-1.231621514022408193e-05,-1.230042663002991746e-05,1.883817278440294095e-07,-7.871768886259086163e-08,-8.178669744372860518e-12,2.393768688639080531e-09,-2.584304750908644292e-11,-1.124143739147210143e-11,2.412592619116744559e-13,-2.340032200272727904e-13,1.539945570969710340e-15,3.876811945290199468e-15,-4.439857157613678206e-17,
                        6.271465628061906328e-02,-1.046735491150755292e-03,1.047823037182813713e-03,-3.787442391961062591e-08,-1.735483474965899672e-05,1.439343199541804870e-07,1.435827133144297081e-07,-2.374858424883399505e-09,-2.021037664411793224e-12,1.947128560305628111e-11,-1.935919316047878482e-11,-1.377124076516027402e-15,3.272091633840016172e-13,-2.852524189198726062e-15,-2.863749330126302314e-15,4.250309814855562421e-17,
                        6.240223483343071420e-02,-1.363430392346513028e-03,5.664131727590657195e-04,1.223668008431549717e-05,-1.220719346330571059e-05,-7.896051788361672012e-08,1.866220359702029824e-07,1.109943436229946544e-11,-2.378095110679587417e-09,1.099618919593842986e-11,2.580955446344233661e-11,-2.388897385992771462e-13,-2.344348813908767568e-13,3.817674271282896475e-15,1.536923356065121101e-15,-4.332759556772651168e-17,
                        6.283780485566048402e-02,-1.478479212802830470e-03,3.333831044739458616e-06,1.727860051207010320e-05,1.100355225380756614e-08,-2.018326413800916086e-07,-8.235249534564435608e-10,2.365154185102104875e-09,9.975873011063529078e-12,-2.825627788956103362e-11,-1.440883944997788191e-13,3.376258808411751119e-13,1.768473229983504456e-15,-4.219493873037388566e-15,-4.069181201026308475e-17,4.556604973482164214e-17,
                        6.248818011570657360e-02,-1.366626219860900878e-03,-5.574879847926586182e-04,1.232706964420555425e-05,1.220756661205359879e-05,-7.973033189405285413e-08,-1.878474050822155734e-07,5.063741983735379384e-12,2.392436235519710073e-09,1.116739505464279577e-11,-2.586188673583119776e-11,-2.424420979551792592e-13,2.336450569719321716e-13,3.868887911832912024e-15,-1.537640610705024676e-15,-4.358491459467596402e-17,
                        6.165702089662839641e-02,-1.028719443631766726e-03,-1.022467273134976869e-03,1.202883514340766427e-08,1.705849608172778839e-05,1.414579611285729436e-07,-1.423075184895538933e-07,-2.350282286738936327e-09,4.183369748120106479e-12,1.925784189174997335e-11,1.920581036850152688e-11,-1.539097737960372830e-15,-3.231897947980288911e-13,-2.812049295970454849e-15,2.841632150534771959e-15,4.261971898307067187e-17,
                        6.336344149299086292e-02,-5.765161966793786287e-04,-1.379843852092413944e-03,-1.245243253509829940e-05,1.250038111486519555e-05,1.911587643359019156e-07,7.896709890663438728e-08,-1.690532419260318466e-11,-2.428260825587416007e-09,-2.617031014014637400e-11,1.159481276814706786e-11,2.470363640009760659e-13,2.346840992749507068e-13,1.521143783736099888e-15,-3.945768086970000023e-15,-4.419730799117415381e-17,
                        6.272459524656620600e-02,-3.300913170390634807e-06,-1.473428085927450419e-03,-1.733230686861173819e-05,5.342314006733410291e-08,3.080750117834394372e-10,2.022527039434656755e-07,2.378916858837841393e-09,-3.168802240164013990e-12,5.569371117054988980e-16,-2.859771660780659165e-11,-3.441531022211677819e-13,-7.810623807526842178e-16,-4.393411561468003052e-18,4.308715978253868480e-15,4.689322097376300087e-17,
                        6.297101551150575960e-02,5.643779655977043544e-04,-1.374842213319484073e-03,-1.249548939102581523e-05,-1.231774655004831170e-05,-1.905598311019658554e-07,8.060008836132748209e-08,2.062615128110757251e-12,2.434736190556973789e-09,2.646308645169545979e-11,1.135195001177482828e-11,2.446282847327438594e-13,-2.417739383759788058e-13,-1.606368726815885368e-15,-3.943675215082700522e-15,-4.461941735136229047e-17,
                        6.238053548476620719e-02,1.038990192853301306e-03,-1.037154815312080636e-03,-1.624434914832108246e-08,-1.731155527166966556e-05,-1.449083426346060965e-07,-1.450433460830683044e-07,-2.411815754623633920e-09,-4.828870526949295645e-12,-1.993417191317676780e-11,1.979370569483224125e-11,-1.917765839962974774e-15,3.360655551985567691e-13,2.942857261392206534e-15,2.969295609615871629e-15,4.451099855163552057e-17,
                        6.260171925948471161e-02,1.367056435585468042e-03,-5.633485954821482655e-04,1.231836849593462912e-05,-1.230091537893505484e-05,7.865183326273326009e-08,-1.898348190252732239e-07,-1.130043444377350728e-11,-2.421756924323242566e-09,-1.149377896411034509e-11,-2.626451059800407243e-11,-2.482651174568614607e-13,-2.395278397570435390e-13,-3.982320570977324792e-15,-1.592778377641859787e-15,-4.503675329216723071e-17};
    monitor16pu::matInvNorm15 = {1.000003842111640173e+00,9.999339155758250053e-01,9.999613485487530706e-01,9.999245728760640661e-01,1.000169133027317470e+00,9.999887853817465144e-01,9.999875367206880750e-01,9.999073921609406002e-01,9.999856232906959574e-01,1.000073356874412234e+00,1.000017455261239752e+00,1.000071559698644696e+00,9.998422062121793408e-01,1.000044355136718854e+00,9.999446488560410629e-01,1.000140151052085535e+00,
                        8.380796005233882795e+01,7.771145478628254466e+01,5.962960636531391856e+01,3.198826049418720885e+01,4.229671786544587087e-01,-3.218673900362998808e+01,-5.958301014935136664e+01,-7.845578013674658280e+01,-8.456861448758583322e+01,-7.793976855751184019e+01,-6.089376232309970760e+01,-3.217744786098418075e+01,-3.785840078649872070e-02,3.238496513906805774e+01,6.003392960722874960e+01,7.779868772824023893e+01,
                        9.622955467608648172e-01,3.199108449008893373e+01,6.197620014722254211e+01,7.764073970663888247e+01,8.666517794977795575e+01,7.749201832231049991e+01,6.112833626807520915e+01,3.181451876045507277e+01,7.090234546601680288e-01,-3.312628849943363463e+01,-5.958684108496061782e+01,-7.806307359498298126e+01,-8.412913589212907084e+01,-7.821944695427288252e+01,-5.922829736390616517e+01,-3.306211160653684544e+01,
                        7.018994189263068620e+03,5.080357160639074209e+03,-1.837478689975672523e+02,-5.080218438777588744e+03,-7.366222460595396115e+03,-5.062213150046626652e+03,-6.330767817191470925e+01,5.136716320112727772e+03,7.194531204534600874e+03,5.060009952214029909e+03,4.143149338333218168e+01,-5.025487138487653283e+03,-7.214379876305093603e+03,-5.014752753263587692e+03,-2.908876472634371169e+01,5.075261854226389005e+03,
                        4.719073310244203157e+01,5.068121272655576831e+03,7.272526950383818985e+03,5.026391884011711227e+03,3.344636575995555461e+01,-5.056848282609405942e+03,-7.228762161704264145e+03,-5.107356320504989526e+03,1.881793136202152184e+01,5.064331720763235353e+03,7.364170437630719789e+03,5.003562853610916136e+03,2.785927761432990835e+01,-5.070438958997464397e+03,-7.198569966895035577e+03,-5.081946293932432127e+03,
                        5.931658195265893592e+05,2.338815616208376305e+05,-4.476826783846946782e+05,-5.602819832985377871e+05,-1.639226467128859667e+03,5.638122697122534737e+05,4.375989044537804439e+05,-2.385500737585728930e+05,-6.142313662606854923e+05,-2.341003643493511190e+05,4.422583155467043398e+05,5.564866324803766329e+05,1.553429189010804066e+03,-5.593735328294278588e+05,-4.361454774954200839e+05,2.352126008516644652e+05,
                        1.733590102775183823e+03,5.636934467244467232e+05,4.260196134581808583e+05,-2.405033210676578165e+05,-6.225448630826633889e+05,-2.370911855171922653e+05,4.360538632523380802e+05,5.695775586681684945e+05,-3.431410642116015424e+03,-5.617377246291603660e+05,-4.498123185435839114e+05,2.349160907993594592e+05,6.111627218046365306e+05,2.317092636066973209e+05,-4.345437074614539160e+05,-5.605178167293900624e+05,
                        4.987092356801528484e+07,4.447518450176328188e+05,-5.295405933303615451e+07,1.458359062735761749e+06,5.220777192180593312e+07,9.405731605342011899e+05,-5.344339141771052033e+07,9.279005807395989541e+05,5.188593210407877713e+07,6.072565646811689949e+05,-5.424851930740482360e+07,8.082962582123586908e+05,5.162304938693358004e+07,3.637025648001093650e+05,-5.258282670158503950e+07,6.282779393843616126e+05,
                        1.977806225841316627e+05,5.169505295087503642e+07,-1.130016897219566396e+06,-5.212425412875749916e+07,1.357198185928351886e+05,5.213947339811725169e+07,-8.250188782278122380e+04,-5.270661495766038448e+07,2.963350411871391698e+05,5.208375103712174296e+07,2.079337748516576830e+05,-5.132615877065725625e+07,-2.330371215148026240e+05,5.161127541797751188e+07,-8.508464904555617250e+04,-5.154316436626729369e+07,
                        4.202112711203301430e+09,-1.634195666702368498e+09,-3.106909989698691845e+09,4.149427056621729374e+09,-2.202770379153316468e+07,-4.123984889188008308e+09,3.228289590372787476e+09,1.621709320575987101e+09,-4.400534968101716042e+09,1.639161894067622900e+09,3.265042470884566307e+09,-4.060240162135756016e+09,-8.020696722210187465e+06,4.041783743209918499e+09,-3.155110322165650368e+09,-1.596973679787877798e+09,
                        3.388537066449384391e+07,4.030980185253132343e+09,-3.205676374572342873e+09,-1.580978307620392799e+09,4.430568934738506317e+09,-1.631733733018624544e+09,-3.193446903317361832e+09,4.156792061131393433e+09,-4.499298766080981120e+06,-4.133607259863242626e+09,3.253068793993239403e+09,1.589668265389823675e+09,-4.350170441346466064e+09,1.605656955020836115e+09,3.176162853574741364e+09,-4.074707600644390583e+09,
                        3.491852905899704590e+11,-2.530942426647469788e+11,3.492940201083008766e+09,2.569342206703104248e+11,-3.726711443960348511e+11,2.604355857435857544e+11,-3.275830177691141605e+09,-2.585089495585712585e+11,3.693232092650638428e+11,-2.597955839410419617e+11,-6.870804176606903076e+08,2.535960551532515564e+11,-3.641042681879528198e+11,2.526051257965307312e+11,6.335898619488921165e+08,-2.521209547659824524e+11,
                        3.420532074989078522e+09,2.576447819911822815e+11,-3.709081933430524902e+11,2.707143839164924622e+11,-2.477324968804492950e+09,-2.664755235872942810e+11,3.794037234303944092e+11,-2.698843546482242737e+11,-6.309554232246243395e+06,2.685989224207263184e+11,-3.850580728768602905e+11,2.633616879409482117e+11,5.472732178109289408e+08,-2.612775108673136902e+11,3.735300257592744141e+11,-2.641227410725647278e+11,
                        2.793837643239760938e+13,-2.656053689846369531e+13,2.106818956430916797e+13,-1.220541616123223242e+13,1.410053179974940491e+11,1.192487904183614062e+13,-2.146026365579735938e+13,2.771347116307352734e+13,-3.001522284013966016e+13,2.777374808534591797e+13,-2.191481854220090625e+13,1.191792536429475586e+13,-8.449977767506344604e+10,-1.155660444583321289e+13,2.093750252803382422e+13,-2.663338881366574219e+13,
                        1.559331277284637146e+11,1.149561165512746289e+13,-2.090364987720534766e+13,2.756545234813671484e+13,-3.019842706768454297e+13,2.770540350745921875e+13,-2.176459105054109766e+13,1.225192226734455664e+13,-6.997186266261053467e+10,-1.204215544655462500e+13,2.185911061233155469e+13,-2.703374156063121875e+13,2.938449759477989062e+13,-2.673242217819759375e+13,2.100472118451342969e+13,-1.179704810393715625e+13,
                        1.323100685038486250e+15,-1.360341993819534250e+15,1.376796562643399500e+15,-1.423658727584073000e+15,1.440792882199037250e+15,-1.428285215714143250e+15,1.423892139812061250e+15,-1.434509674775447500e+15,1.435978372553446750e+15,-1.436521328263131500e+15,1.443796679699884000e+15,-1.397169795814290500e+15,1.397732743069400000e+15,-1.367627397169950500e+15,1.367615245144060750e+15,-1.367057611243086750e+15};
}

void initBunch(array<array<double, 1000>, 2> &, int);
void J_image(array<array<double, 1000>, 2> &, array<double, 16> &);
void trans(array<array<double, 1000>, 2> &, double, int);
void operation(array<array<double, 1000>, 2>, array<array<double, 1000>, 2> &, double);
void bunchOperation(array<array<double, 1000>, 2>, array<array<array<double, 1000>, 2>, 100> &, array<pair<double, int>, 100> &);
void genChange(array<array<double, 1000>, 2>, array<array<array<double, 1000>, 2>, 100> &, array<pair<double, int>, 100> &);
void bunchMutate(array<array<array<double, 1000>, 2>, 100> &);

double loss(array<array<double, 1000>, 2>, array<array<double, 1000>, 2>);
double MSE(array<double, 16>, array<double, 16>);
double EP(array<array<double, 1000>, 2>, array<array<double, 1000>, 2>);

void printOut(array<array<double, 1000>, 2>, const char *);

double mean(array<double, 16>);
double mean(array<double, 1000>);
double mean_squre(array<double, 16>);
double mean_squre(array<double, 1000>);
double variance(array<double, 16>);
double variance(array<double, 1000>);
double standard_deviation(array<double, 16>);
double standard_deviation(array<double, 1000>);

monitor16pu monitor_param;

int main() {
    int i;
    string trueName = "../result/true.dat";

    /* Initialize reference bunch position and testing bunch position */
    array<array<double, 1000>, 2> reference_bunch;
    array<array<array<double, 1000>, 2>, 100> try_bunch;
    initBunch(reference_bunch, 0); printOut(reference_bunch, trueName.c_str());
    for (i = 0; i < 100; i++) {
        initBunch(try_bunch[i], 1);
    }
    array<pair<double, int>, 100> lossContainer;
    array<array<array<double, 1000>, 2>, 10> bunchContainer;
    for (i = 0; i < 100; i++) {
        lossContainer[i] = make_pair(loss(reference_bunch, try_bunch[i]), i);
    }
    
    sort(lossContainer.begin(), lossContainer.end(), less<>());
    for (i = 0; i < 10; i++) {
        cout << "  " << lossContainer[i].second << "-st bunch is selected!";
        cout << "\tLoss value: " << lossContainer[i].first << endl;
        bunchContainer[i] = try_bunch[lossContainer[i].second];
    }
    for (i = 0; i < 100; i++) {
        try_bunch[i] = bunchContainer[(int)i/10];
    }
    bunchMutate(try_bunch);
    for (i = 0; i < 100; i++) {
        lossContainer[i] = make_pair(loss(reference_bunch, try_bunch[i]), i);
    }
    

    for (i = 0; i < 20; i++) {
        string fName = "../result/procedure/test_"+to_string(i)+".dat";
        cout << "\n#" << i << " Geneneration changed" << endl;
        printOut(try_bunch[i], fName.c_str());
        bunchOperation(reference_bunch, try_bunch, lossContainer);
    }

    string testName = "../result/test.dat";
    printOut(try_bunch[0], testName.c_str());
    
    printf("\nMean X of true bunch: %1.5e\n", mean(reference_bunch[0]));
    printf("Mean Y of true bunch: %1.5e\n", mean(reference_bunch[1]));
    printf("Std X of true bunch: %1.5e\n", standard_deviation(reference_bunch[0]));
    printf("Std Y of true bunch: %1.5e\n\n", standard_deviation(reference_bunch[1]));
    printf("Mean X of test bunch: %1.5e\n", mean(try_bunch[lossContainer[0].second][0]));
    printf("Mean Y of test bunch: %1.5e\n", mean(try_bunch[lossContainer[0].second][1]));
    printf("Std X of test bunch: %1.5e\n", standard_deviation(try_bunch[lossContainer[0].second][0]));
    printf("Std Y of test bunch: %1.5e\n\n", standard_deviation(try_bunch[lossContainer[0].second][1]));
    printf("Done");

    return 0;
}

void trans(array<array<double, 1000>, 2> &bunch, double gd, int mode) {
    int i;
    uniform_real_distribution<> distX(-1, 1);
    uniform_real_distribution<> distY(-1, 1);
    double dX = gd*distX(engine);
    double dY = gd*distY(engine);
    for (i = 0; i < 1000; i++) {
        double x = bunch[0][i];
        double y = bunch[1][i];
        if (mode%4 == 0 || mode%4 == 2) {
            bunch[0][i] = bunch[0][i] + dX;
            bunch[1][i] = bunch[1][i] + dY;
        } else if (mode%4 == 1 || mode%4 == 3) {
            bunch[0][i] = bunch[0][i] * (1 + dX);
            bunch[1][i] = bunch[1][i] * (1 + dY);
        }
        //  else if (mode%4 == 2) {
        //    bunch[0][i] = bunch[0][i] * (1 + y * dX);
        //    bunch[1][i] = bunch[1][i] * (1 + x * dY);
        //} else if (mode%4 == 3) {
        //   bunch[0][i] = bunch[0][i] * (1 + abs(y) * dX);
        //    bunch[1][i] = bunch[1][i] * (1 + abs(x) * dY);
        //}
    }
    return;
}

void bunchMutate(array<array<array<double, 1000>, 2>, 100> &bunch) {
    int i;
    uniform_real_distribution<> distMutate(0, 1);
    for (i = 0; i < 100; i++) {
        uniform_real_distribution<> distMode(0, 17);
        if (_MRATE > distMutate(engine)) {
            initBunch(bunch[i], 1);
            cout << "  " << i << "-st bunch is Mutated!" << endl;
        }
    }
    return;
}

void genChange(array<array<double, 1000>, 2> reference, array<array<array<double, 1000>, 2>, 100> &bunch, array<pair<double, int>, 100> &lossContainer) {
    int i;
    array<array<array<double, 1000>, 2>, 5> bunchContainer;
    for (i = 0; i < 100; i++) {
        lossContainer[i] = make_pair(loss(reference, bunch[i]), i);
    }
    sort(lossContainer.begin(), lossContainer.end(), less<>());
    for (i = 0; i < 5; i++) {
        cout << "  " << lossContainer[i].second << "-st bunch is selected!";
        cout << "\tLoss value: " << lossContainer[i].first << endl;
        bunchContainer[i] = bunch[lossContainer[i].second];
    }
    for (i = 0; i < 100; i++) {
        bunch[i] = bunchContainer[(int)i/20];
    }
    bunchMutate(bunch);
    return;
}

void operation(array<array<double, 1000>, 2> reference, array<array<double, 1000>, 2> &bunch, double prev_loss) {
    int i, turn = 0;
    bool loop = true;
    array<array<array<double, 1000>, 2>, 16> bunchContainer;
    array<pair<double, int>, 16> lossContainer;
    do {

        for (i = 0; i < 16; i++) {
            bunchContainer[i] = bunch;
            trans(bunchContainer[i], 1, i);
            lossContainer[i] = make_pair(loss(reference, bunchContainer[i]), i);
        }
        sort(lossContainer.begin(), lossContainer.end(), less<>());

        if (lossContainer[0].first < prev_loss || turn == 100) {
            bunch = bunchContainer[lossContainer[0].second];
            loop = false;
        }
        turn++;
    }while(loop);
    return;
}

void bunchOperation(array<array<double, 1000>, 2> reference, array<array<array<double, 1000>, 2>, 100> &bunch, array<pair<double, int>, 100> &lossContainer) {
    int i;
    vector<thread> threads;
    for (i = 0; i < 100; i++) {
        threads.emplace_back(
            [i, &reference, &bunch, &lossContainer]{operation(reference, bunch[i], lossContainer[i].first);}
        );
    }
    for (thread &th:threads) {
        th.join();
    }
    genChange(reference, bunch, lossContainer);
    return;
}

double loss(array<array<double, 1000>, 2> reference, array<array<double, 1000>, 2> test) {
    array<double, 16> refVol = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    array<double, 16> tryVol = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    double res;
    J_image(reference, refVol); J_image(test, tryVol);
    res = MSE(refVol, tryVol) + EP(reference, test);
    return res;
}

double MSE(array<double, 16> reference, array<double, 16> test) {
    int i;
    double res=0;
    for (i = 0; i < 16; i++) {
        res += pow((reference[i] - test[i]),2);
    }
    return res/16;
}

double EP(array<array<double, 1000>, 2> reference, array<array<double, 1000>, 2> test) {
    double ms_x_ref, ms_y_ref, ms_x_try, ms_y_try;
    ms_x_ref = standard_deviation(reference[0]);
    ms_y_ref = standard_deviation(reference[1]);
    ms_x_try = standard_deviation(test[0]);
    ms_y_try = standard_deviation(test[1]);
    double res = 0;
    double w = 1000;
    res = exp(w*pow(sqrt(ms_x_ref) - sqrt(ms_x_try), 2)) + exp(w*pow(sqrt(ms_y_ref) - sqrt(ms_y_try), 2));
    return res-2;
}

void J_image(array<array<double, 1000>, 2> &bunch, array<double, 16> &output) {
    int i, j;
    double buf[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    for (i = 0; i < 1000; i++) {
        complex<double> pos(bunch[0][i], bunch[1][i]);
        for (j = 0; j < 16; j++) {
            if (j == 0) {
                buf[j] += 1;
            } else if (j%2 == 0) {
                buf[j] += std::imag(pow(pos, (int)(j+1)/2));
            } else {
                buf[j] += std::real(pow(pos, (int)(j+1)/2));
            }
        }
    }
    for (i = 0; i < 16; i++) output[i] /= 1000;
    for (i = 0; i < 16; i++) {
        for (j = 0; j < 16; j++) {
            output[i] += monitor_param.gain13[i] * monitor_param.mat13[i][j] * buf[j];
        }
    }
    return;
}

void initBunch(array<array<double, 1000>, 2> &bunch, int mode) {
    if (mode == 0) {
        uniform_real_distribution<> distMean(-25, 25);
        uniform_real_distribution<> distStd(4, 12);
        uniform_real_distribution<> distMode(0, 17);
        int i, j;
        for (i = 0; i < bunch.size(); i++) {
            normal_distribution<> distCord(distMean(engine), distStd(engine));
            for (j = 0; j < bunch.at(i).size(); j++) {
                bunch[i][j] = distCord(engine);
            }
        }
        //trans(bunch, 0.01, (int)distMode(engine));
    } else if (mode == 1) {
        uniform_real_distribution<> distMean(-50, 50);
        uniform_real_distribution<> distStd(5, 20);
        int i, j;
        for (i = 0; i < bunch.size(); i++) {
            normal_distribution<> distCord(distMean(engine), distStd(engine));
            for (j = 0; j < bunch.at(i).size(); j++) {
                bunch[i][j] = distCord(engine);
            }
        }
    }
    return;
}

/* For statistical calculation */
double mean(array<double, 16> arr) {
    double res = 0.0;
    for (int i = 0; i < 16; i++) res += arr[i];
    return res/16;
}

double mean_squre(array<double, 16> arr) {
    double res = 0.0;
    for (int i = 0; i < 16; i++) res += pow(arr[i], 2);
    return res/16;
}

double variance(array<double, 16> arr) {
    return mean_squre(arr) + pow(mean(arr), 2);
}

double standard_deviation(array<double, 16> arr) {
    return sqrt(variance(arr));
}

double mean(array<double, 1000> arr) {
    double res = 0.0;
    for (int i = 0; i < 1000; i++) res += arr[i];
    return res/1000;
}

double mean_squre(array<double, 1000> arr) {
    double res = 0.0;
    for (int i = 0; i < 1000; i++) res += pow(arr[i], 2);
    return res/1000;
}

double variance(array<double, 1000> arr) {
    return mean_squre(arr) + pow(mean(arr), 2);
}

double standard_deviation(array<double, 1000> arr) {
    return sqrt(variance(arr));
}

void printOut(array<array<double, 1000>, 2> particle, const char fName[]) {
    int i;
    std::string pos;
    std::ofstream posFile;
    posFile.open(fName);
    for (i = 0; i < 1000; i++) {
        pos = std::to_string(particle[0][i]) + "," + std::to_string(particle[1][i]) + "\n";
        posFile << pos.c_str();
    }
    posFile << "-82.5, -82.5\n";
    posFile << "-82.5, 82.5\n";
    posFile << "82.5, -82.5\n";
    posFile << "82.5, 82.5\n";
}